#version 330 core
precision highp float;
uniform float iTime;
uniform vec3 iResolution;
out vec4 FragColor;

/*
    "Plasma" by @XorDev
    Reference: x.com/XorDev/status/1894123951401378051
*/

// The mainImage function computes the plasma color.
void mainImage(out vec4 O, in vec2 I)
{
    // Resolution vector.
    vec2 r = iResolution.xy;
    // Centered, ratio-corrected coordinates (scaled).
    vec2 p = ((I + I - r) / r.y) * 1.1;

    // Initialize depth (z) and fluid coordinates f.
    vec2 z = vec2(0.0);
    vec2 iVal = vec2(0.0);
    z += vec2(6.0) - 6.0 * abs(0.9 - dot(p, p));
    vec2 f = p * z;

    // Clear output color.
    O = vec4(0.0);

    // Loop to accumulate plasma effect.
    for(iVal.y = 0.0; iVal.y < 18.0; iVal.y++) {
        vec2 s = sin(f) + vec2(2.0);
        vec4 wave = vec4(s.y, s.x, s.y, s.x);
        // Remove extra multiplier to avoid the middle line.
        O += (wave / 2.0) / 4.0 * abs(f.x - f.y) / 8.0;
        f += cos(vec2(f.y, f.x) * iVal.y + iVal.y + (iTime * 0.3)) / ((iVal.y + 1.0) + 0.7) * 2.0;
    }

    // Tonemap with a gradient.
    vec4 tonemapFactor = 12.0 * exp(vec4(z.x - 6.0,
                                          z.x - 6.0 - p.y,
                                          z.x - 6.0 - 3.0 * p.y,
                                          z.x - 6.0));
    O = tanh(tonemapFactor / O);
}

void main() {
    mainImage(FragColor, gl_FragCoord.xy);
}
