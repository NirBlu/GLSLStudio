#version 330 core
    precision highp float;
    uniform float iTime;
    uniform vec3 iResolution;
    out vec4 FragColor;

    void mainImage(out vec4 O, in vec2 I)
    {
        // Center the coordinates using the screen's center.
        vec2 r = iResolution.xy;
        vec2 p = (I*4-2* r) / r.y*4;

        // Subtract a small sine offset from the y-coordinate.
        float sineAmp = 0.5;       // Small amplitude for the sine wave.
        float frequency = 8.0;      // Frequency determines the number of waves across the width.
        p.y -= sineAmp * sin(p.x * frequency  * 0.3);

        // Instead of using the circular distance (dot(p, p)), compute the vertical distance from the sine line.
        float d = abs(p.y);

        // Compute a modifier 'z' based on the distance from the sine line.
        vec2 z = vec2(6.0) - 6.0 * abs(0.9 - d);

        // Initialize f based on the modified coordinates.
        vec2 f = p * z;

        // Clear the output color.
        O = vec4(0.0);

        // Iteratively accumulate the plasma effect.
        for (float i = 0.0; i < 18.0; i++) {
            // Compute a sine modulation on f.
            vec2 s = sin(f) + vec2(2.0);
            vec4 wave = vec4(s.y, s.x, s.y, s.x);
            O += (wave / 2.0) / 4.0 * (1.0 / 8.0);
            // Perturb f with cosine modulation, using the current iteration.
            f += cos(vec2(f.y, f.x) * i + i + (iTime * 0.3)) / ((i + 1.0) + 0.7) * 2.0;
        }

        // Apply tonemapping. Use 'd' (distance from the sine line) to modulate contrast.
        vec4 tonemapFactor = 1.0 * exp(vec4(z.x - 6.0,
                                              z.x - 6.0 - d,
                                              z.x - 6.0 - 3.0 * d,
                                              z.x - 6.0));
        O = tanh(tonemapFactor / O);

        // Clamp the final color to avoid full white.
        O = clamp(O, 0.0, 0.9);
    }

    void main() {
        mainImage(FragColor, gl_FragCoord.xy);
    }
